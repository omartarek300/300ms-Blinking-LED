
300ms-Blinking-LED-with-Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000068a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000068a  0000071e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  00000726  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb9  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000764  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000941  00000000  00000000  00001b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000024ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b0  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000521  00000000  00000000  00002a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002f8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	82 02       	muls	r24, r18
  56:	8c 02       	muls	r24, r28
  58:	96 02       	muls	r25, r22
  5a:	a0 02       	muls	r26, r16
  5c:	b4 02       	muls	r27, r20
  5e:	aa 02       	muls	r26, r26
  60:	be 02       	muls	r27, r30
  62:	c8 02       	muls	r28, r24
  64:	ed 02       	muls	r30, r29
  66:	f7 02       	muls	r31, r23
  68:	01 03       	mulsu	r16, r17
  6a:	0b 03       	fmul	r16, r19
  6c:	1f 03       	fmul	r17, r23
  6e:	15 03       	mulsu	r17, r21
  70:	29 03       	fmul	r18, r17
  72:	33 03       	mulsu	r19, r19

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ea e8       	ldi	r30, 0x8A	; 138
  88:	f6 e0       	ldi	r31, 0x06	; 6
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a8 36       	cpi	r26, 0x68	; 104
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	a8 e6       	ldi	r26, 0x68	; 104
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a9 36       	cpi	r26, 0x69	; 105
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 81 00 	call	0x102	; 0x102 <main>
  aa:	0c 94 43 03 	jmp	0x686	; 0x686 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <LED_init>:
 *      Author: Omar
 */
#include "LED.h"
void LED_init(uint8_t port_name,uint8_t pin_num)
{
	DIO_init(port_name, pin_num);
  b2:	0e 94 9f 00 	call	0x13e	; 0x13e <DIO_init>
  b6:	08 95       	ret

000000b8 <LED_on>:
}
void LED_on(uint8_t port_name,uint8_t pin_num)
{
	DIO_set(port_name, pin_num);
  b8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_set>
  bc:	08 95       	ret

000000be <LED_off>:
}
void LED_off(uint8_t port_name,uint8_t pin_num)
{
	DIO_reset(port_name, pin_num);
  be:	0e 94 cf 00 	call	0x19e	; 0x19e <DIO_reset>
  c2:	08 95       	ret

000000c4 <LED_toggle>:
}
void LED_toggle()
{
	volatile static uint8_t state = OFF;
	if(state == ON)
  c4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	39 f4       	brne	.+14     	; 0xda <LED_toggle+0x16>
	{
		LED_off(PA,pin1);
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 5f 00 	call	0xbe	; 0xbe <LED_off>
		state = OFF;
  d4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
  d8:	08 95       	ret
	}
	else if(state == OFF)
  da:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
  de:	81 11       	cpse	r24, r1
  e0:	06 c0       	rjmp	.+12     	; 0xee <LED_toggle+0x2a>
	{
		LED_on(PA,pin1);
  e2:	62 e0       	ldi	r22, 0x02	; 2
  e4:	0e 94 5c 00 	call	0xb8	; 0xb8 <LED_on>
		state = ON;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
  ee:	08 95       	ret

000000f0 <LED_blink>:
	}
}
void LED_blink()
{
	//using timer1
	if(GETBIT(TIFR,bit4))
  f0:	08 b6       	in	r0, 0x38	; 56
  f2:	04 fe       	sbrs	r0, 4
  f4:	05 c0       	rjmp	.+10     	; 0x100 <LED_blink+0x10>
	{
		LED_toggle();
  f6:	0e 94 62 00 	call	0xc4	; 0xc4 <LED_toggle>
		SETBIT(TIFR,bit4); //CLEAR FLAG AFTER MATCH
  fa:	88 b7       	in	r24, 0x38	; 56
  fc:	80 61       	ori	r24, 0x10	; 16
  fe:	88 bf       	out	0x38, r24	; 56
 100:	08 95       	ret

00000102 <main>:
 * Author : Omar
 */ 
#include "ECUAL/LED.h"
#define counts_num 293
int main(void)
{			
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	27 97       	sbiw	r28, 0x07	; 7
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	de bf       	out	0x3e, r29	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	cd bf       	out	0x3d, r28	; 61
    LED_init(PA,pin1);
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 59 00 	call	0xb2	; 0xb2 <LED_init>
	config conf = {timer1, compare, f_cpu_clk_1024, counts_num}; // initialize timer
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	e0 e6       	ldi	r30, 0x60	; 96
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	de 01       	movw	r26, r28
 126:	11 96       	adiw	r26, 0x01	; 1
 128:	01 90       	ld	r0, Z+
 12a:	0d 92       	st	X+, r0
 12c:	8a 95       	dec	r24
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x26>
	Timer_init(&conf);
 130:	ce 01       	movw	r24, r28
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Timer_init>
    while (1) 
    {
		LED_blink();
 138:	0e 94 78 00 	call	0xf0	; 0xf0 <LED_blink>
 13c:	fd cf       	rjmp	.-6      	; 0x138 <main+0x36>

0000013e <DIO_init>:
 *      Author: Omar
 */
#include "dio.h"
void DIO_init(uint8_t Port_name, uint8_t pins )
{
	switch(Port_name)
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	51 f0       	breq	.+20     	; 0x156 <DIO_init+0x18>
 142:	28 f0       	brcs	.+10     	; 0x14e <DIO_init+0x10>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	59 f0       	breq	.+22     	; 0x15e <DIO_init+0x20>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	69 f0       	breq	.+26     	; 0x166 <DIO_init+0x28>
 14c:	08 95       	ret
	{
		case PA:
		{
			DDRA |= pins;
 14e:	8a b3       	in	r24, 0x1a	; 26
 150:	68 2b       	or	r22, r24
 152:	6a bb       	out	0x1a, r22	; 26
		}
		break;
 154:	08 95       	ret
		case PB:
		{
			DDRB |= pins;
 156:	87 b3       	in	r24, 0x17	; 23
 158:	68 2b       	or	r22, r24
 15a:	67 bb       	out	0x17, r22	; 23
		}
		break;
 15c:	08 95       	ret
		case PC:
		{
			DDRC |= pins;
 15e:	84 b3       	in	r24, 0x14	; 20
 160:	68 2b       	or	r22, r24
 162:	64 bb       	out	0x14, r22	; 20
		}
		break;
 164:	08 95       	ret
		case PD:
		{
			DDRD |= pins;
 166:	81 b3       	in	r24, 0x11	; 17
 168:	68 2b       	or	r22, r24
 16a:	61 bb       	out	0x11, r22	; 17
 16c:	08 95       	ret

0000016e <DIO_set>:
		break;
	}
}
void DIO_set(uint8_t Port_name, uint8_t pins)
{
	switch(Port_name)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	51 f0       	breq	.+20     	; 0x186 <DIO_set+0x18>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_set+0x10>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	59 f0       	breq	.+22     	; 0x18e <DIO_set+0x20>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	69 f0       	breq	.+26     	; 0x196 <DIO_set+0x28>
 17c:	08 95       	ret
	{
		case PA:
		{
			PORTA |= pins;
 17e:	8b b3       	in	r24, 0x1b	; 27
 180:	68 2b       	or	r22, r24
 182:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 184:	08 95       	ret
		case PB:
		{
			PORTA |= pins;
 186:	8b b3       	in	r24, 0x1b	; 27
 188:	68 2b       	or	r22, r24
 18a:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 18c:	08 95       	ret
		case PC:
		{
			PORTA |= pins;
 18e:	8b b3       	in	r24, 0x1b	; 27
 190:	68 2b       	or	r22, r24
 192:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 194:	08 95       	ret
		case PD:
		{
			PORTA |= pins;
 196:	8b b3       	in	r24, 0x1b	; 27
 198:	68 2b       	or	r22, r24
 19a:	6b bb       	out	0x1b, r22	; 27
 19c:	08 95       	ret

0000019e <DIO_reset>:
		break;
	}
}
void DIO_reset(uint8_t Port_name, uint8_t pins)
{
	switch(Port_name)
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <DIO_reset+0x1a>
 1a2:	28 f0       	brcs	.+10     	; 0x1ae <DIO_reset+0x10>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	69 f0       	breq	.+26     	; 0x1c2 <DIO_reset+0x24>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	81 f0       	breq	.+32     	; 0x1cc <DIO_reset+0x2e>
 1ac:	08 95       	ret
	{
		case PA:
		{
			PORTA = PORTA & (~pins);
 1ae:	8b b3       	in	r24, 0x1b	; 27
 1b0:	60 95       	com	r22
 1b2:	68 23       	and	r22, r24
 1b4:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 1b6:	08 95       	ret
		case PB:
		{
			PORTB = PORTB & (~pins);
 1b8:	88 b3       	in	r24, 0x18	; 24
 1ba:	60 95       	com	r22
 1bc:	68 23       	and	r22, r24
 1be:	68 bb       	out	0x18, r22	; 24
		}
		break;
 1c0:	08 95       	ret
		case PC:
		{
			PORTC = PORTC & (~pins);
 1c2:	85 b3       	in	r24, 0x15	; 21
 1c4:	60 95       	com	r22
 1c6:	68 23       	and	r22, r24
 1c8:	65 bb       	out	0x15, r22	; 21
		}
		break;
 1ca:	08 95       	ret
		case PD:
		{
			PORTD = PORTD & (~pins);
 1cc:	82 b3       	in	r24, 0x12	; 18
 1ce:	60 95       	com	r22
 1d0:	68 23       	and	r22, r24
 1d2:	62 bb       	out	0x12, r22	; 18
 1d4:	08 95       	ret

000001d6 <Timer_init>:
 * Created: 9/7/2021 2:26:14 AM
 *  Author: Omar
 */ 
#include "timer.h"
void Timer_init(const config* conf)
{
 1d6:	fc 01       	movw	r30, r24
	if(conf->timer_num == timer0)
 1d8:	80 81       	ld	r24, Z
 1da:	81 11       	cpse	r24, r1
 1dc:	b3 c0       	rjmp	.+358    	; 0x344 <Timer_init+0x16e>
	{
		if(conf->timer_mode == normal)
 1de:	81 81       	ldd	r24, Z+1	; 0x01
 1e0:	81 11       	cpse	r24, r1
 1e2:	54 c0       	rjmp	.+168    	; 0x28c <Timer_init+0xb6>
		{
			TCNT0 = 0; //set timer initial value to 0
 1e4:	12 be       	out	0x32, r1	; 50
			SETBIT(TIMSK,0); //enable overflow interrupt
 1e6:	89 b7       	in	r24, 0x39	; 57
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR0,7); //set FOCO pin non_pwm mode
 1ec:	83 b7       	in	r24, 0x33	; 51
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	83 bf       	out	0x33, r24	; 51
			switch(conf->timer_preScale)
 1f2:	82 81       	ldd	r24, Z+2	; 0x02
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	11 f1       	breq	.+68     	; 0x23c <Timer_init+0x66>
 1f8:	28 f4       	brcc	.+10     	; 0x204 <Timer_init+0x2e>
 1fa:	88 23       	and	r24, r24
 1fc:	59 f0       	breq	.+22     	; 0x214 <Timer_init+0x3e>
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	99 f0       	breq	.+38     	; 0x228 <Timer_init+0x52>
 202:	08 95       	ret
 204:	86 30       	cpi	r24, 0x06	; 6
 206:	71 f1       	breq	.+92     	; 0x264 <Timer_init+0x8e>
 208:	87 30       	cpi	r24, 0x07	; 7
 20a:	b1 f1       	breq	.+108    	; 0x278 <Timer_init+0xa2>
 20c:	85 30       	cpi	r24, 0x05	; 5
 20e:	09 f0       	breq	.+2      	; 0x212 <Timer_init+0x3c>
 210:	33 c2       	rjmp	.+1126   	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
 212:	1e c0       	rjmp	.+60     	; 0x250 <Timer_init+0x7a>
			{
				case no_clock:
					CLRBIT(TCCR0,0);
 214:	83 b7       	in	r24, 0x33	; 51
 216:	8e 7f       	andi	r24, 0xFE	; 254
 218:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 21a:	83 b7       	in	r24, 0x33	; 51
 21c:	8d 7f       	andi	r24, 0xFD	; 253
 21e:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 220:	83 b7       	in	r24, 0x33	; 51
 222:	8b 7f       	andi	r24, 0xFB	; 251
 224:	83 bf       	out	0x33, r24	; 51
					break;
 226:	08 95       	ret
				case f_cpu_clk:
					SETBIT(TCCR0,0);
 228:	83 b7       	in	r24, 0x33	; 51
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 22e:	83 b7       	in	r24, 0x33	; 51
 230:	8d 7f       	andi	r24, 0xFD	; 253
 232:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 234:	83 b7       	in	r24, 0x33	; 51
 236:	8b 7f       	andi	r24, 0xFB	; 251
 238:	83 bf       	out	0x33, r24	; 51
					break;
 23a:	08 95       	ret
				case f_cpu_clk_8:
					CLRBIT(TCCR0,0);
 23c:	83 b7       	in	r24, 0x33	; 51
 23e:	8e 7f       	andi	r24, 0xFE	; 254
 240:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 242:	83 b7       	in	r24, 0x33	; 51
 244:	82 60       	ori	r24, 0x02	; 2
 246:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 248:	83 b7       	in	r24, 0x33	; 51
 24a:	8b 7f       	andi	r24, 0xFB	; 251
 24c:	83 bf       	out	0x33, r24	; 51
					break;	
 24e:	08 95       	ret
				case f_cpu_clk_32:
					break;
				case f_cpu_clk_64:
					SETBIT(TCCR0,0);
 250:	83 b7       	in	r24, 0x33	; 51
 252:	81 60       	ori	r24, 0x01	; 1
 254:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 256:	83 b7       	in	r24, 0x33	; 51
 258:	82 60       	ori	r24, 0x02	; 2
 25a:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 25c:	83 b7       	in	r24, 0x33	; 51
 25e:	8b 7f       	andi	r24, 0xFB	; 251
 260:	83 bf       	out	0x33, r24	; 51
					break;
 262:	08 95       	ret
				case f_cpu_clk_128:
					break;	
				case f_cpu_clk_256:
					CLRBIT(TCCR0,0);
 264:	83 b7       	in	r24, 0x33	; 51
 266:	8e 7f       	andi	r24, 0xFE	; 254
 268:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 26a:	83 b7       	in	r24, 0x33	; 51
 26c:	8d 7f       	andi	r24, 0xFD	; 253
 26e:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 270:	83 b7       	in	r24, 0x33	; 51
 272:	84 60       	ori	r24, 0x04	; 4
 274:	83 bf       	out	0x33, r24	; 51
					break;	
 276:	08 95       	ret
				case f_cpu_clk_1024:
					SETBIT(TCCR0,0);
 278:	83 b7       	in	r24, 0x33	; 51
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 27e:	83 b7       	in	r24, 0x33	; 51
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 284:	83 b7       	in	r24, 0x33	; 51
 286:	84 60       	ori	r24, 0x04	; 4
 288:	83 bf       	out	0x33, r24	; 51
					break;
 28a:	08 95       	ret
			}
		}
		else if(conf->timer_mode == compare)
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	09 f0       	breq	.+2      	; 0x292 <Timer_init+0xbc>
 290:	f3 c1       	rjmp	.+998    	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
		{
			TCNT0 = 0; //set timer initial value to 0
 292:	12 be       	out	0x32, r1	; 50
			SETBIT(TIMSK,1); //enable compare interrupt	
 294:	89 b7       	in	r24, 0x39	; 57
 296:	82 60       	ori	r24, 0x02	; 2
 298:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR0,3);//set FOCO pin non_pwm mode and WGM
 29a:	83 b7       	in	r24, 0x33	; 51
 29c:	88 60       	ori	r24, 0x08	; 8
 29e:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,7);//set FOCO pin non_pwm mode and WGM
 2a0:	83 b7       	in	r24, 0x33	; 51
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	83 bf       	out	0x33, r24	; 51
			OCR0  = conf->ticks_num; //set the compare value
 2a6:	83 81       	ldd	r24, Z+3	; 0x03
 2a8:	8c bf       	out	0x3c, r24	; 60
			switch(conf->timer_preScale)
 2aa:	82 81       	ldd	r24, Z+2	; 0x02
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	11 f1       	breq	.+68     	; 0x2f4 <Timer_init+0x11e>
 2b0:	28 f4       	brcc	.+10     	; 0x2bc <Timer_init+0xe6>
 2b2:	88 23       	and	r24, r24
 2b4:	59 f0       	breq	.+22     	; 0x2cc <Timer_init+0xf6>
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	99 f0       	breq	.+38     	; 0x2e0 <Timer_init+0x10a>
 2ba:	08 95       	ret
 2bc:	86 30       	cpi	r24, 0x06	; 6
 2be:	71 f1       	breq	.+92     	; 0x31c <Timer_init+0x146>
 2c0:	87 30       	cpi	r24, 0x07	; 7
 2c2:	b1 f1       	breq	.+108    	; 0x330 <Timer_init+0x15a>
 2c4:	85 30       	cpi	r24, 0x05	; 5
 2c6:	09 f0       	breq	.+2      	; 0x2ca <Timer_init+0xf4>
 2c8:	d7 c1       	rjmp	.+942    	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
 2ca:	1e c0       	rjmp	.+60     	; 0x308 <Timer_init+0x132>
			{
				case no_clock:
				CLRBIT(TCCR0,0);
 2cc:	83 b7       	in	r24, 0x33	; 51
 2ce:	8e 7f       	andi	r24, 0xFE	; 254
 2d0:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
 2d2:	83 b7       	in	r24, 0x33	; 51
 2d4:	8d 7f       	andi	r24, 0xFD	; 253
 2d6:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
 2d8:	83 b7       	in	r24, 0x33	; 51
 2da:	8b 7f       	andi	r24, 0xFB	; 251
 2dc:	83 bf       	out	0x33, r24	; 51
				break;
 2de:	08 95       	ret
				case f_cpu_clk:
				SETBIT(TCCR0,0);
 2e0:	83 b7       	in	r24, 0x33	; 51
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
 2e6:	83 b7       	in	r24, 0x33	; 51
 2e8:	8d 7f       	andi	r24, 0xFD	; 253
 2ea:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
 2ec:	83 b7       	in	r24, 0x33	; 51
 2ee:	8b 7f       	andi	r24, 0xFB	; 251
 2f0:	83 bf       	out	0x33, r24	; 51
				break;
 2f2:	08 95       	ret
				case f_cpu_clk_8:
				CLRBIT(TCCR0,0);
 2f4:	83 b7       	in	r24, 0x33	; 51
 2f6:	8e 7f       	andi	r24, 0xFE	; 254
 2f8:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,1);
 2fa:	83 b7       	in	r24, 0x33	; 51
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
 300:	83 b7       	in	r24, 0x33	; 51
 302:	8b 7f       	andi	r24, 0xFB	; 251
 304:	83 bf       	out	0x33, r24	; 51
				break;
 306:	08 95       	ret
				case f_cpu_clk_32:
				break;
				case f_cpu_clk_64:
				SETBIT(TCCR0,0);
 308:	83 b7       	in	r24, 0x33	; 51
 30a:	81 60       	ori	r24, 0x01	; 1
 30c:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,1);
 30e:	83 b7       	in	r24, 0x33	; 51
 310:	82 60       	ori	r24, 0x02	; 2
 312:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
 314:	83 b7       	in	r24, 0x33	; 51
 316:	8b 7f       	andi	r24, 0xFB	; 251
 318:	83 bf       	out	0x33, r24	; 51
				break;
 31a:	08 95       	ret
				case f_cpu_clk_128:
				break;
				case f_cpu_clk_256:
				CLRBIT(TCCR0,0);
 31c:	83 b7       	in	r24, 0x33	; 51
 31e:	8e 7f       	andi	r24, 0xFE	; 254
 320:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
 322:	83 b7       	in	r24, 0x33	; 51
 324:	8d 7f       	andi	r24, 0xFD	; 253
 326:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,2);
 328:	83 b7       	in	r24, 0x33	; 51
 32a:	84 60       	ori	r24, 0x04	; 4
 32c:	83 bf       	out	0x33, r24	; 51
				break;
 32e:	08 95       	ret
				case f_cpu_clk_1024:
				SETBIT(TCCR0,0);
 330:	83 b7       	in	r24, 0x33	; 51
 332:	81 60       	ori	r24, 0x01	; 1
 334:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
 336:	83 b7       	in	r24, 0x33	; 51
 338:	8d 7f       	andi	r24, 0xFD	; 253
 33a:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,2);
 33c:	83 b7       	in	r24, 0x33	; 51
 33e:	84 60       	ori	r24, 0x04	; 4
 340:	83 bf       	out	0x33, r24	; 51
				break;
 342:	08 95       	ret
			}
		}
	}
	else if(conf->timer_num == timer1)
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	09 f0       	breq	.+2      	; 0x34a <Timer_init+0x174>
 348:	c4 c0       	rjmp	.+392    	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
	{
		if(conf->timer_mode == normal)
 34a:	81 81       	ldd	r24, Z+1	; 0x01
 34c:	81 11       	cpse	r24, r1
 34e:	58 c0       	rjmp	.+176    	; 0x400 <__EEPROM_REGION_LENGTH__>
		{
			TCNT1H = 0; //set timer initial value to 0
 350:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0;
 352:	1c bc       	out	0x2c, r1	; 44
			SETBIT(TIMSK,2); //enable overflow interrupt
 354:	89 b7       	in	r24, 0x39	; 57
 356:	84 60       	ori	r24, 0x04	; 4
 358:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR1A,2); //non_pwm mode
 35a:	8f b5       	in	r24, 0x2f	; 47
 35c:	84 60       	ori	r24, 0x04	; 4
 35e:	8f bd       	out	0x2f, r24	; 47
			SETBIT(TCCR1A,3); //non_pwm mode
 360:	8f b5       	in	r24, 0x2f	; 47
 362:	88 60       	ori	r24, 0x08	; 8
 364:	8f bd       	out	0x2f, r24	; 47
			switch(conf->timer_preScale)
 366:	82 81       	ldd	r24, Z+2	; 0x02
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	11 f1       	breq	.+68     	; 0x3b0 <Timer_init+0x1da>
 36c:	28 f4       	brcc	.+10     	; 0x378 <Timer_init+0x1a2>
 36e:	88 23       	and	r24, r24
 370:	59 f0       	breq	.+22     	; 0x388 <Timer_init+0x1b2>
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	99 f0       	breq	.+38     	; 0x39c <Timer_init+0x1c6>
 376:	08 95       	ret
 378:	86 30       	cpi	r24, 0x06	; 6
 37a:	71 f1       	breq	.+92     	; 0x3d8 <Timer_init+0x202>
 37c:	87 30       	cpi	r24, 0x07	; 7
 37e:	b1 f1       	breq	.+108    	; 0x3ec <Timer_init+0x216>
 380:	85 30       	cpi	r24, 0x05	; 5
 382:	09 f0       	breq	.+2      	; 0x386 <Timer_init+0x1b0>
 384:	79 c1       	rjmp	.+754    	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
 386:	1e c0       	rjmp	.+60     	; 0x3c4 <Timer_init+0x1ee>
			{
				case no_clock:
				CLRBIT(TCCR1B,0);
 388:	8e b5       	in	r24, 0x2e	; 46
 38a:	8e 7f       	andi	r24, 0xFE	; 254
 38c:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 38e:	8e b5       	in	r24, 0x2e	; 46
 390:	8d 7f       	andi	r24, 0xFD	; 253
 392:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 394:	8e b5       	in	r24, 0x2e	; 46
 396:	8b 7f       	andi	r24, 0xFB	; 251
 398:	8e bd       	out	0x2e, r24	; 46
				break;
 39a:	08 95       	ret
				case f_cpu_clk:
				SETBIT(TCCR1B,0);
 39c:	8e b5       	in	r24, 0x2e	; 46
 39e:	81 60       	ori	r24, 0x01	; 1
 3a0:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 3a2:	8e b5       	in	r24, 0x2e	; 46
 3a4:	8d 7f       	andi	r24, 0xFD	; 253
 3a6:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 3a8:	8e b5       	in	r24, 0x2e	; 46
 3aa:	8b 7f       	andi	r24, 0xFB	; 251
 3ac:	8e bd       	out	0x2e, r24	; 46
				break;
 3ae:	08 95       	ret
				case f_cpu_clk_8:
				CLRBIT(TCCR1B,0);
 3b0:	8e b5       	in	r24, 0x2e	; 46
 3b2:	8e 7f       	andi	r24, 0xFE	; 254
 3b4:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
 3b6:	8e b5       	in	r24, 0x2e	; 46
 3b8:	82 60       	ori	r24, 0x02	; 2
 3ba:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 3bc:	8e b5       	in	r24, 0x2e	; 46
 3be:	8b 7f       	andi	r24, 0xFB	; 251
 3c0:	8e bd       	out	0x2e, r24	; 46
				break;
 3c2:	08 95       	ret
				case f_cpu_clk_32:
				break;
				case f_cpu_clk_64:
				SETBIT(TCCR1B,0);
 3c4:	8e b5       	in	r24, 0x2e	; 46
 3c6:	81 60       	ori	r24, 0x01	; 1
 3c8:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
 3ca:	8e b5       	in	r24, 0x2e	; 46
 3cc:	82 60       	ori	r24, 0x02	; 2
 3ce:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 3d0:	8e b5       	in	r24, 0x2e	; 46
 3d2:	8b 7f       	andi	r24, 0xFB	; 251
 3d4:	8e bd       	out	0x2e, r24	; 46
				break;
 3d6:	08 95       	ret
				case f_cpu_clk_128:
				break;
				case f_cpu_clk_256:
				CLRBIT(TCCR1B,0);
 3d8:	8e b5       	in	r24, 0x2e	; 46
 3da:	8e 7f       	andi	r24, 0xFE	; 254
 3dc:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 3de:	8e b5       	in	r24, 0x2e	; 46
 3e0:	8d 7f       	andi	r24, 0xFD	; 253
 3e2:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
 3e4:	8e b5       	in	r24, 0x2e	; 46
 3e6:	84 60       	ori	r24, 0x04	; 4
 3e8:	8e bd       	out	0x2e, r24	; 46
				break;
 3ea:	08 95       	ret
				case f_cpu_clk_1024:
				SETBIT(TCCR1B,0);
 3ec:	8e b5       	in	r24, 0x2e	; 46
 3ee:	81 60       	ori	r24, 0x01	; 1
 3f0:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 3f2:	8e b5       	in	r24, 0x2e	; 46
 3f4:	8d 7f       	andi	r24, 0xFD	; 253
 3f6:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
 3f8:	8e b5       	in	r24, 0x2e	; 46
 3fa:	84 60       	ori	r24, 0x04	; 4
 3fc:	8e bd       	out	0x2e, r24	; 46
				break;
 3fe:	08 95       	ret
			}
			
		}
		else if(conf->timer_mode == compare)
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	09 f0       	breq	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	39 c1       	rjmp	.+626    	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
		{
			TCNT1H = 0; //set timer initial value to 0
 406:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0;
 408:	1c bc       	out	0x2c, r1	; 44
			SETBIT(TIMSK,4); //enable compare interrupt
 40a:	89 b7       	in	r24, 0x39	; 57
 40c:	80 61       	ori	r24, 0x10	; 16
 40e:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR1A,2); //non_pwm mode
 410:	8f b5       	in	r24, 0x2f	; 47
 412:	84 60       	ori	r24, 0x04	; 4
 414:	8f bd       	out	0x2f, r24	; 47
			SETBIT(TCCR1A,3); //non_pwm mode
 416:	8f b5       	in	r24, 0x2f	; 47
 418:	88 60       	ori	r24, 0x08	; 8
 41a:	8f bd       	out	0x2f, r24	; 47
			OCR1AH = (uint8_t) (conf->ticks_num >> 8);
 41c:	83 81       	ldd	r24, Z+3	; 0x03
 41e:	94 81       	ldd	r25, Z+4	; 0x04
 420:	a5 81       	ldd	r26, Z+5	; 0x05
 422:	b6 81       	ldd	r27, Z+6	; 0x06
 424:	89 2f       	mov	r24, r25
 426:	9a 2f       	mov	r25, r26
 428:	ab 2f       	mov	r26, r27
 42a:	bb 27       	eor	r27, r27
 42c:	8b bd       	out	0x2b, r24	; 43
			OCR1AL = (uint8_t)(conf->ticks_num & (0X00FF));
 42e:	83 81       	ldd	r24, Z+3	; 0x03
 430:	8a bd       	out	0x2a, r24	; 42
			SETBIT(TCCR1B,3);
 432:	8e b5       	in	r24, 0x2e	; 46
 434:	88 60       	ori	r24, 0x08	; 8
 436:	8e bd       	out	0x2e, r24	; 46
			switch(conf->timer_preScale)
 438:	82 81       	ldd	r24, Z+2	; 0x02
 43a:	82 30       	cpi	r24, 0x02	; 2
 43c:	11 f1       	breq	.+68     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 43e:	28 f4       	brcc	.+10     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 440:	88 23       	and	r24, r24
 442:	59 f0       	breq	.+22     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	99 f0       	breq	.+38     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 448:	08 95       	ret
 44a:	86 30       	cpi	r24, 0x06	; 6
 44c:	71 f1       	breq	.+92     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 44e:	87 30       	cpi	r24, 0x07	; 7
 450:	b1 f1       	breq	.+108    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 452:	85 30       	cpi	r24, 0x05	; 5
 454:	09 f0       	breq	.+2      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 456:	10 c1       	rjmp	.+544    	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
 458:	1e c0       	rjmp	.+60     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			{
				case no_clock:
				CLRBIT(TCCR1B,0);
 45a:	8e b5       	in	r24, 0x2e	; 46
 45c:	8e 7f       	andi	r24, 0xFE	; 254
 45e:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 460:	8e b5       	in	r24, 0x2e	; 46
 462:	8d 7f       	andi	r24, 0xFD	; 253
 464:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 466:	8e b5       	in	r24, 0x2e	; 46
 468:	8b 7f       	andi	r24, 0xFB	; 251
 46a:	8e bd       	out	0x2e, r24	; 46
				break;
 46c:	08 95       	ret
				case f_cpu_clk:
				SETBIT(TCCR1B,0);
 46e:	8e b5       	in	r24, 0x2e	; 46
 470:	81 60       	ori	r24, 0x01	; 1
 472:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 474:	8e b5       	in	r24, 0x2e	; 46
 476:	8d 7f       	andi	r24, 0xFD	; 253
 478:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 47a:	8e b5       	in	r24, 0x2e	; 46
 47c:	8b 7f       	andi	r24, 0xFB	; 251
 47e:	8e bd       	out	0x2e, r24	; 46
				break;
 480:	08 95       	ret
				case f_cpu_clk_8:
				CLRBIT(TCCR1B,0);
 482:	8e b5       	in	r24, 0x2e	; 46
 484:	8e 7f       	andi	r24, 0xFE	; 254
 486:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
 488:	8e b5       	in	r24, 0x2e	; 46
 48a:	82 60       	ori	r24, 0x02	; 2
 48c:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 48e:	8e b5       	in	r24, 0x2e	; 46
 490:	8b 7f       	andi	r24, 0xFB	; 251
 492:	8e bd       	out	0x2e, r24	; 46
				break;
 494:	08 95       	ret
				case f_cpu_clk_32:
				break;
				case f_cpu_clk_64:
				SETBIT(TCCR1B,0);
 496:	8e b5       	in	r24, 0x2e	; 46
 498:	81 60       	ori	r24, 0x01	; 1
 49a:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
 49c:	8e b5       	in	r24, 0x2e	; 46
 49e:	82 60       	ori	r24, 0x02	; 2
 4a0:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
 4a2:	8e b5       	in	r24, 0x2e	; 46
 4a4:	8b 7f       	andi	r24, 0xFB	; 251
 4a6:	8e bd       	out	0x2e, r24	; 46
				break;
 4a8:	08 95       	ret
				case f_cpu_clk_128:
				break;
				case f_cpu_clk_256:
				CLRBIT(TCCR1B,0);
 4aa:	8e b5       	in	r24, 0x2e	; 46
 4ac:	8e 7f       	andi	r24, 0xFE	; 254
 4ae:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 4b0:	8e b5       	in	r24, 0x2e	; 46
 4b2:	8d 7f       	andi	r24, 0xFD	; 253
 4b4:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
 4b6:	8e b5       	in	r24, 0x2e	; 46
 4b8:	84 60       	ori	r24, 0x04	; 4
 4ba:	8e bd       	out	0x2e, r24	; 46
				break;
 4bc:	08 95       	ret
				case f_cpu_clk_1024:
				SETBIT(TCCR1B,0);
 4be:	8e b5       	in	r24, 0x2e	; 46
 4c0:	81 60       	ori	r24, 0x01	; 1
 4c2:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
 4c4:	8e b5       	in	r24, 0x2e	; 46
 4c6:	8d 7f       	andi	r24, 0xFD	; 253
 4c8:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
 4ca:	8e b5       	in	r24, 0x2e	; 46
 4cc:	84 60       	ori	r24, 0x04	; 4
 4ce:	8e bd       	out	0x2e, r24	; 46
				break;
 4d0:	08 95       	ret
			}
		}	
	}
	else if(conf->timer_num == timer2)
 4d2:	82 30       	cpi	r24, 0x02	; 2
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4d6:	d0 c0       	rjmp	.+416    	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
	{
		if(conf->timer_mode == normal)
 4d8:	81 81       	ldd	r24, Z+1	; 0x01
 4da:	81 11       	cpse	r24, r1
 4dc:	63 c0       	rjmp	.+198    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
		{
			TCNT2 = 0; //set timer initial value to 0
 4de:	14 bc       	out	0x24, r1	; 36
			SETBIT(TIMSK,6); //enable overflow interrupt
 4e0:	89 b7       	in	r24, 0x39	; 57
 4e2:	80 64       	ori	r24, 0x40	; 64
 4e4:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR2,7); //set FOCO pin non_pwm mode
 4e6:	85 b5       	in	r24, 0x25	; 37
 4e8:	80 68       	ori	r24, 0x80	; 128
 4ea:	85 bd       	out	0x25, r24	; 37
			switch(conf->timer_preScale)
 4ec:	e2 81       	ldd	r30, Z+2	; 0x02
 4ee:	8e 2f       	mov	r24, r30
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	88 30       	cpi	r24, 0x08	; 8
 4f4:	91 05       	cpc	r25, r1
 4f6:	08 f0       	brcs	.+2      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4f8:	bf c0       	rjmp	.+382    	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
 4fa:	fc 01       	movw	r30, r24
 4fc:	e6 5d       	subi	r30, 0xD6	; 214
 4fe:	ff 4f       	sbci	r31, 0xFF	; 255
 500:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__tablejump2__>
			{
				case no_clock:
					CLRBIT(TCCR0,0);
 504:	83 b7       	in	r24, 0x33	; 51
 506:	8e 7f       	andi	r24, 0xFE	; 254
 508:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 50a:	83 b7       	in	r24, 0x33	; 51
 50c:	8d 7f       	andi	r24, 0xFD	; 253
 50e:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 510:	83 b7       	in	r24, 0x33	; 51
 512:	8b 7f       	andi	r24, 0xFB	; 251
 514:	83 bf       	out	0x33, r24	; 51
					break;
 516:	08 95       	ret
				case f_cpu_clk:
					SETBIT(TCCR0,0);
 518:	83 b7       	in	r24, 0x33	; 51
 51a:	81 60       	ori	r24, 0x01	; 1
 51c:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 51e:	83 b7       	in	r24, 0x33	; 51
 520:	8d 7f       	andi	r24, 0xFD	; 253
 522:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 524:	83 b7       	in	r24, 0x33	; 51
 526:	8b 7f       	andi	r24, 0xFB	; 251
 528:	83 bf       	out	0x33, r24	; 51
					break;
 52a:	08 95       	ret
				case f_cpu_clk_8:
					CLRBIT(TCCR0,0);
 52c:	83 b7       	in	r24, 0x33	; 51
 52e:	8e 7f       	andi	r24, 0xFE	; 254
 530:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 532:	83 b7       	in	r24, 0x33	; 51
 534:	82 60       	ori	r24, 0x02	; 2
 536:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 538:	83 b7       	in	r24, 0x33	; 51
 53a:	8b 7f       	andi	r24, 0xFB	; 251
 53c:	83 bf       	out	0x33, r24	; 51
					break;
 53e:	08 95       	ret
				case f_cpu_clk_32:
					SETBIT(TCCR0,0);
 540:	83 b7       	in	r24, 0x33	; 51
 542:	81 60       	ori	r24, 0x01	; 1
 544:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 546:	83 b7       	in	r24, 0x33	; 51
 548:	82 60       	ori	r24, 0x02	; 2
 54a:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 54c:	83 b7       	in	r24, 0x33	; 51
 54e:	8b 7f       	andi	r24, 0xFB	; 251
 550:	83 bf       	out	0x33, r24	; 51
					break;
 552:	08 95       	ret
				case f_cpu_clk_64:
					CLRBIT(TCCR0,0);
 554:	83 b7       	in	r24, 0x33	; 51
 556:	8e 7f       	andi	r24, 0xFE	; 254
 558:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 55a:	83 b7       	in	r24, 0x33	; 51
 55c:	8d 7f       	andi	r24, 0xFD	; 253
 55e:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 560:	83 b7       	in	r24, 0x33	; 51
 562:	84 60       	ori	r24, 0x04	; 4
 564:	83 bf       	out	0x33, r24	; 51
					break;
 566:	08 95       	ret
				case f_cpu_clk_128:
					SETBIT(TCCR0,0);
 568:	83 b7       	in	r24, 0x33	; 51
 56a:	81 60       	ori	r24, 0x01	; 1
 56c:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 56e:	83 b7       	in	r24, 0x33	; 51
 570:	8d 7f       	andi	r24, 0xFD	; 253
 572:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 574:	83 b7       	in	r24, 0x33	; 51
 576:	84 60       	ori	r24, 0x04	; 4
 578:	83 bf       	out	0x33, r24	; 51
					break;
 57a:	08 95       	ret
				case f_cpu_clk_256:
					CLRBIT(TCCR0,0);
 57c:	83 b7       	in	r24, 0x33	; 51
 57e:	8e 7f       	andi	r24, 0xFE	; 254
 580:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 582:	83 b7       	in	r24, 0x33	; 51
 584:	82 60       	ori	r24, 0x02	; 2
 586:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 588:	83 b7       	in	r24, 0x33	; 51
 58a:	84 60       	ori	r24, 0x04	; 4
 58c:	83 bf       	out	0x33, r24	; 51
					break;
 58e:	08 95       	ret
				case f_cpu_clk_1024:
					SETBIT(TCCR0,0);
 590:	83 b7       	in	r24, 0x33	; 51
 592:	81 60       	ori	r24, 0x01	; 1
 594:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 596:	83 b7       	in	r24, 0x33	; 51
 598:	82 60       	ori	r24, 0x02	; 2
 59a:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 59c:	83 b7       	in	r24, 0x33	; 51
 59e:	84 60       	ori	r24, 0x04	; 4
 5a0:	83 bf       	out	0x33, r24	; 51
					break;
 5a2:	08 95       	ret
			}	
		}
		else if(conf->timer_mode == compare)
 5a4:	81 30       	cpi	r24, 0x01	; 1
 5a6:	09 f0       	breq	.+2      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
 5a8:	67 c0       	rjmp	.+206    	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
		{
			TCNT2 = 0; //set timer initial value to 0
 5aa:	14 bc       	out	0x24, r1	; 36
			SETBIT(TIMSK,7); //enable compare interrupt
 5ac:	89 b7       	in	r24, 0x39	; 57
 5ae:	80 68       	ori	r24, 0x80	; 128
 5b0:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR2,3);//set FOCO pin non_pwm mode and WGM
 5b2:	85 b5       	in	r24, 0x25	; 37
 5b4:	88 60       	ori	r24, 0x08	; 8
 5b6:	85 bd       	out	0x25, r24	; 37
			SETBIT(TCCR2,7);//set FOCO pin non_pwm mode and WGM
 5b8:	85 b5       	in	r24, 0x25	; 37
 5ba:	80 68       	ori	r24, 0x80	; 128
 5bc:	85 bd       	out	0x25, r24	; 37
			OCR2  = conf->ticks_num; //set the compare value
 5be:	83 81       	ldd	r24, Z+3	; 0x03
 5c0:	83 bd       	out	0x23, r24	; 35
			switch(conf->timer_preScale)
 5c2:	e2 81       	ldd	r30, Z+2	; 0x02
 5c4:	8e 2f       	mov	r24, r30
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	88 30       	cpi	r24, 0x08	; 8
 5ca:	91 05       	cpc	r25, r1
 5cc:	08 f0       	brcs	.+2      	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 5ce:	54 c0       	rjmp	.+168    	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
 5d0:	fc 01       	movw	r30, r24
 5d2:	ee 5c       	subi	r30, 0xCE	; 206
 5d4:	ff 4f       	sbci	r31, 0xFF	; 255
 5d6:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__tablejump2__>
			{
				case no_clock:
					CLRBIT(TCCR0,0);
 5da:	83 b7       	in	r24, 0x33	; 51
 5dc:	8e 7f       	andi	r24, 0xFE	; 254
 5de:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 5e0:	83 b7       	in	r24, 0x33	; 51
 5e2:	8d 7f       	andi	r24, 0xFD	; 253
 5e4:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 5e6:	83 b7       	in	r24, 0x33	; 51
 5e8:	8b 7f       	andi	r24, 0xFB	; 251
 5ea:	83 bf       	out	0x33, r24	; 51
					break;
 5ec:	08 95       	ret
				case f_cpu_clk:
					SETBIT(TCCR0,0);
 5ee:	83 b7       	in	r24, 0x33	; 51
 5f0:	81 60       	ori	r24, 0x01	; 1
 5f2:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 5f4:	83 b7       	in	r24, 0x33	; 51
 5f6:	8d 7f       	andi	r24, 0xFD	; 253
 5f8:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 5fa:	83 b7       	in	r24, 0x33	; 51
 5fc:	8b 7f       	andi	r24, 0xFB	; 251
 5fe:	83 bf       	out	0x33, r24	; 51
					break;
 600:	08 95       	ret
				case f_cpu_clk_8:
					CLRBIT(TCCR0,0);
 602:	83 b7       	in	r24, 0x33	; 51
 604:	8e 7f       	andi	r24, 0xFE	; 254
 606:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 608:	83 b7       	in	r24, 0x33	; 51
 60a:	82 60       	ori	r24, 0x02	; 2
 60c:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 60e:	83 b7       	in	r24, 0x33	; 51
 610:	8b 7f       	andi	r24, 0xFB	; 251
 612:	83 bf       	out	0x33, r24	; 51
					break;
 614:	08 95       	ret
				case f_cpu_clk_32:
					SETBIT(TCCR0,0);
 616:	83 b7       	in	r24, 0x33	; 51
 618:	81 60       	ori	r24, 0x01	; 1
 61a:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 61c:	83 b7       	in	r24, 0x33	; 51
 61e:	82 60       	ori	r24, 0x02	; 2
 620:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
 622:	83 b7       	in	r24, 0x33	; 51
 624:	8b 7f       	andi	r24, 0xFB	; 251
 626:	83 bf       	out	0x33, r24	; 51
					break;
 628:	08 95       	ret
				case f_cpu_clk_64:
					CLRBIT(TCCR0,0);
 62a:	83 b7       	in	r24, 0x33	; 51
 62c:	8e 7f       	andi	r24, 0xFE	; 254
 62e:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 630:	83 b7       	in	r24, 0x33	; 51
 632:	8d 7f       	andi	r24, 0xFD	; 253
 634:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 636:	83 b7       	in	r24, 0x33	; 51
 638:	84 60       	ori	r24, 0x04	; 4
 63a:	83 bf       	out	0x33, r24	; 51
					break;
 63c:	08 95       	ret
				case f_cpu_clk_128:
					SETBIT(TCCR0,0);
 63e:	83 b7       	in	r24, 0x33	; 51
 640:	81 60       	ori	r24, 0x01	; 1
 642:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
 644:	83 b7       	in	r24, 0x33	; 51
 646:	8d 7f       	andi	r24, 0xFD	; 253
 648:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 64a:	83 b7       	in	r24, 0x33	; 51
 64c:	84 60       	ori	r24, 0x04	; 4
 64e:	83 bf       	out	0x33, r24	; 51
					break;
 650:	08 95       	ret
				case f_cpu_clk_256:
					CLRBIT(TCCR0,0);
 652:	83 b7       	in	r24, 0x33	; 51
 654:	8e 7f       	andi	r24, 0xFE	; 254
 656:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 658:	83 b7       	in	r24, 0x33	; 51
 65a:	82 60       	ori	r24, 0x02	; 2
 65c:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 65e:	83 b7       	in	r24, 0x33	; 51
 660:	84 60       	ori	r24, 0x04	; 4
 662:	83 bf       	out	0x33, r24	; 51
					break;
 664:	08 95       	ret
				case f_cpu_clk_1024:
					SETBIT(TCCR0,0);
 666:	83 b7       	in	r24, 0x33	; 51
 668:	81 60       	ori	r24, 0x01	; 1
 66a:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
 66c:	83 b7       	in	r24, 0x33	; 51
 66e:	82 60       	ori	r24, 0x02	; 2
 670:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
 672:	83 b7       	in	r24, 0x33	; 51
 674:	84 60       	ori	r24, 0x04	; 4
 676:	83 bf       	out	0x33, r24	; 51
 678:	08 95       	ret

0000067a <__tablejump2__>:
 67a:	ee 0f       	add	r30, r30
 67c:	ff 1f       	adc	r31, r31
 67e:	05 90       	lpm	r0, Z+
 680:	f4 91       	lpm	r31, Z
 682:	e0 2d       	mov	r30, r0
 684:	09 94       	ijmp

00000686 <_exit>:
 686:	f8 94       	cli

00000688 <__stop_program>:
 688:	ff cf       	rjmp	.-2      	; 0x688 <__stop_program>
